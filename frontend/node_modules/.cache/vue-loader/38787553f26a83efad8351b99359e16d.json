{"remainingRequest":"/Users/philippwegner/Desktop/Fraunhofer/SEM-Group/git/data-steward-tool/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/philippwegner/Desktop/Fraunhofer/SEM-Group/git/data-steward-tool/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/philippwegner/Desktop/Fraunhofer/SEM-Group/git/data-steward-tool/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/philippwegner/Desktop/Fraunhofer/SEM-Group/git/data-steward-tool/node_modules/vue-materialize-datatable/src/DataTable.vue?vue&type=template&id=53282f60&scoped=true&","dependencies":[{"path":"/Users/philippwegner/Desktop/Fraunhofer/SEM-Group/git/data-steward-tool/node_modules/vue-materialize-datatable/src/DataTable.vue","mtime":499162500000},{"path":"/Users/philippwegner/Desktop/Fraunhofer/SEM-Group/git/data-steward-tool/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/philippwegner/Desktop/Fraunhofer/SEM-Group/git/data-steward-tool/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/philippwegner/Desktop/Fraunhofer/SEM-Group/git/data-steward-tool/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/philippwegner/Desktop/Fraunhofer/SEM-Group/git/data-steward-tool/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}