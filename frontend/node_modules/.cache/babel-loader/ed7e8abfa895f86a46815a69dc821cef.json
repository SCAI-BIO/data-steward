{"remainingRequest":"/Users/philippwegner/Desktop/Fraunhofer/SEM-Group/git/github/data-steward/frontend/node_modules/thread-loader/dist/cjs.js!/Users/philippwegner/Desktop/Fraunhofer/SEM-Group/git/github/data-steward/frontend/node_modules/babel-loader/lib/index.js!/Users/philippwegner/Desktop/Fraunhofer/SEM-Group/git/github/data-steward/frontend/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/philippwegner/Desktop/Fraunhofer/SEM-Group/git/github/data-steward/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/philippwegner/Desktop/Fraunhofer/SEM-Group/git/github/data-steward/frontend/src/components/DataDump.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/philippwegner/Desktop/Fraunhofer/SEM-Group/git/github/data-steward/frontend/src/components/DataDump.vue","mtime":1635322962955},{"path":"/Users/philippwegner/Desktop/Fraunhofer/SEM-Group/git/github/data-steward/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1635508076994},{"path":"/Users/philippwegner/Desktop/Fraunhofer/SEM-Group/git/github/data-steward/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1635508076954},{"path":"/Users/philippwegner/Desktop/Fraunhofer/SEM-Group/git/github/data-steward/frontend/node_modules/babel-loader/lib/index.js","mtime":1635508077568},{"path":"/Users/philippwegner/Desktop/Fraunhofer/SEM-Group/git/github/data-steward/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1635508076994},{"path":"/Users/philippwegner/Desktop/Fraunhofer/SEM-Group/git/github/data-steward/frontend/node_modules/vue-loader/lib/index.js","mtime":1635508077737}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9Vc2Vycy9waGlsaXBwd2VnbmVyL0Rlc2t0b3AvRnJhdW5ob2Zlci9TRU0tR3JvdXAvZ2l0L2dpdGh1Yi9kYXRhLXN0ZXdhcmQvZnJvbnRlbmQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FzeW5jVG9HZW5lcmF0b3IiOwppbXBvcnQgInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qcyI7Ci8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCmltcG9ydCBNIGZyb20gIm1hdGVyaWFsaXplLWNzcyI7CmltcG9ydCBheCBmcm9tICJheGlvcyI7CnZhciBheGlvcyA9IGF4OwpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogIkRhdGFEdW1wIiwKICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgYXNzZXRzOiBbXQogICAgfTsKICB9LAogIG1vdW50ZWQ6IGZ1bmN0aW9uIG1vdW50ZWQoKSB7CiAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyKCkgewogICAgICB2YXIgYXNzZXRzLCB0aGlzX2Fzc2V0czsKICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHsKICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgc3dpdGNoIChfY29udGV4dDIucHJldiA9IF9jb250ZXh0Mi5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDI7CiAgICAgICAgICAgICAgcmV0dXJuIGF4aW9zLmdldChwcm9jZXNzLmVudi5WVUVfQVBQX0NMSU5JQ0FMVVJMICsgIi9nZXQvc2VtYW50aWMtYXNzZXRzLWFsbCIpOwoKICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgIGFzc2V0cyA9IF9jb250ZXh0Mi5zZW50OwogICAgICAgICAgICAgIF90aGlzLmFzc2V0cyA9IGFzc2V0c1siZGF0YSJdWyJhc3NldHMiXTsKICAgICAgICAgICAgICB0aGlzX2Fzc2V0cyA9IF90aGlzLmFzc2V0czsKCiAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImRhdGFfZHVtcCIpLm9uc3VibWl0ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHZhciBfcmVmID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKGUpIHsKICAgICAgICAgICAgICAgICAgdmFyIGZvcm1EYXRhLCB1cGxvYWRSZXNwb25zZSwgX2Fzc2V0czsKCiAgICAgICAgICAgICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgICAgICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdwcm9ncmVzcycpWzBdLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snOwogICAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygiUE9TVC4uLi4iKTsKICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSh0aGlzKTsKICAgICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNjsKICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXhpb3MoewogICAgICAgICAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiAicG9zdCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IHByb2Nlc3MuZW52LlZVRV9BUFBfQ0xJTklDQUxVUkwgKyAiL3Bvc3Qvc2VtYW50aWMtYXNzZXQiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogZm9ybURhdGEKICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNjoKICAgICAgICAgICAgICAgICAgICAgICAgICB1cGxvYWRSZXNwb25zZSA9IF9jb250ZXh0LnNlbnQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2codXBsb2FkUmVzcG9uc2UpOwoKICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoISghdXBsb2FkUmVzcG9uc2VbImRhdGEiXVsibWVzc2FnZSJdID09ICJvayIpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTM7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJlcnJvciIpLmlubmVySFRNTCA9IHVwbG9hZFJlc3BvbnNlWyJkYXRhIl1bIm1lc3NhZ2UiXTsKICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiZXJyb3IiKS5zdHlsZS5kaXNwbGF5ID0gImJsb2NrIjsKICAgICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMjE7CiAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDEzOgogICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVzZXQoKTsgLy8gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImVycm9yIikuaW5uZXJIVE1MID0gIiI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoInN1Y2Nlc3MiKS5pbm5lckhUTUwgPQogICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgIlN1Y2Nlc3NmdWxseSB1cGxvYWRlZCBhIHNlbWFudGljIGFzc2V0LiI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoInN1Y2Nlc3MiKS5zdHlsZS5kaXNwbGF5ID0gImJsb2NrIjsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgTS51cGRhdGVUZXh0RmllbGRzKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDE3OwogICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBheGlvcy5nZXQocHJvY2Vzcy5lbnYuVlVFX0FQUF9DTElOSUNBTFVSTCArICIvZ2V0L3NlbWFudGljLWFzc2V0cy1hbGwiKTsKCiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTc6CiAgICAgICAgICAgICAgICAgICAgICAgICAgX2Fzc2V0cyA9IF9jb250ZXh0LnNlbnQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc19hc3NldHMgPSBfYXNzZXRzWyJkYXRhIl1bImFzc2V0cyJdOwogICAgICAgICAgICAgICAgICAgICAgICAgIE0udG9hc3QoewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaHRtbDogJ1N1Y2Nlc3NmdWxseSBjb250cmlidXRlZCBhIFNlbWFudGljIEFzc2V0ISBUaGFuayB5b3UhJwogICAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3Byb2dyZXNzJylbMF0uc3R5bGUuZGlzcGxheSA9ICJub25lIjsKCiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjE6CiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0sIF9jYWxsZWUsIHRoaXMpOwogICAgICAgICAgICAgICAgfSkpOwoKICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoX3gpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIF9yZWYuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgfSgpOwoKICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiaW5wdXRfbGFiZWwiKS5vbmNoYW5nZSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHZhciBfdGhpczIgPSB0aGlzOwoKICAgICAgICAgICAgICAgIGlmICh0aGlzX2Fzc2V0cy5zb21lKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgICAgICAgIHJldHVybiBlID09IF90aGlzMi52YWx1ZTsKICAgICAgICAgICAgICAgIH0pKSB7CiAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJsYWJlbC1lcnJvciIpLmlubmVySFRNTCA9ICJUaGlzIHZhcmlhYmxlIG5hbWUgYWxyZWFkeSBleGlzdHMhIjsKICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoInN1Ym1pdCIpLmRpc2FibGVkID0gdHJ1ZTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJsYWJlbC1lcnJvciIpLmlubmVySFRNTCA9ICIiOwogICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgic3VibWl0IikuZGlzYWJsZWQgPSBmYWxzZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgY2FzZSA3OgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwgX2NhbGxlZTIpOwogICAgfSkpKCk7CiAgfQp9Ow=="},{"version":3,"sources":["DataDump.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"container\">\n    <h5>\n      Upload Semantic Asset\n      <i\n        class=\"material-icons tooltipped\"\n        data-position=\"bottom\"\n        data-tooltip=\"A Semantic Asset can be any variable that you are using or planning to use. Uploading your variables here help to higher the coverage of the Common Datamodel!\"\n        >info</i\n      >\n    </h5>\n    <br />\n    <p id=\"error\"></p>\n     <div class=\"progress\" style=\"display: none; width: 40vw; margin: auto\">\n      <div class=\"indeterminate\"></div>\n  </div>\n    <p id=\"success\"></p>\n    <br />\n    <div class=\"row\">\n      <form id=\"data_dump\">\n        <div class=\"row\">\n          <div class=\"input-field col s6\">\n            <input\n              type=\"text\"\n              name=\"label\"\n              id=\"input_label\"\n              placeholder=\"A unique name for the variable\"\n              required\n            />\n            <label for=\"label\">Variable Name</label>\n            <div id=\"label-error\"></div>\n          </div>\n          <div class=\"input-field col s6\">\n            <input\n              type=\"text\"\n              name=\"provenance\"\n              id=\"input_provenance\"\n              placeholder=\"Optionally add adescription\"\n            />\n            <label for=\"provenance\">Provenance (optional)</label>\n          </div>\n        </div>\n        <div class=\"row\">\n          <div class=\"col s12\">\n            <label for=\"textarea1\">Description</label>\n            <textarea\n              id=\"textarea1\"\n              name=\"description\"\n              class=\"materialize-textarea\"\n              required\n            ></textarea>\n\n            <span class=\"helper-text\" data-error=\"wrong\" data-success=\"right\"\n              >Make your desciption as common as possible because this is later\n              used to map your variable to the Common Datamodel.</span\n            >\n          </div>\n        </div>\n\n        <button\n          class=\"btn waves-effect waves-light right\"\n          type=\"submit\"\n          name=\"action\"\n          id=\"submit\"\n        >\n          Upload\n          <i class=\"material-icons right\">send</i>\n        </button>\n      </form>\n    </div>\n  </div>\n</template>\n<script>\nimport M from \"materialize-css\";\nimport ax from \"axios\";\nconst axios = ax;\n\nexport default {\n  name: \"DataDump\",\n  data() {\n    return {\n      assets: [],\n    };\n  },\n  async mounted() {\n     const assets = await axios.get(\n      process.env.VUE_APP_CLINICALURL + \"/get/semantic-assets-all\"\n    );\n    this.assets = assets[\"data\"][\"assets\"];\n    var this_assets = this.assets;\n    document.getElementById(\"data_dump\").onsubmit = async function (e) {\n      document.getElementsByClassName('progress')[0].style.display = 'block';\n      e.preventDefault();\n      console.log(\"POST....\");\n      var formData = new FormData(this);\n      const uploadResponse = await axios({\n        method: \"post\",\n        url: process.env.VUE_APP_CLINICALURL + \"/post/semantic-asset\",\n        data: formData,\n      });\n      console.log(uploadResponse);\n      if (!uploadResponse[\"data\"][\"message\"] == \"ok\") {\n        document.getElementById(\"error\").innerHTML =\n          uploadResponse[\"data\"][\"message\"];\n        document.getElementById(\"error\").style.display = \"block\";\n      } else {\n        this.reset();\n        // document.getElementById(\"error\").innerHTML = \"\";\n        // document.getElementById(\"success\").innerHTML =\n        //   \"Successfully uploaded a semantic asset.\";\n        // document.getElementById(\"success\").style.display = \"block\";\n        M.updateTextFields();\n        const assets = await axios.get(\n          process.env.VUE_APP_CLINICALURL + \"/get/semantic-assets-all\"\n        );\n        this_assets = assets[\"data\"][\"assets\"];\n\n          M.toast({html: 'Successfully contributed a Semantic Asset! Thank you!'});\n           document.getElementsByClassName('progress')[0].style.display = \"none\";\n      }\n    };\n\n   \n    document.getElementById(\"input_label\").onchange = function () {\n      if (this_assets.some((e) => e == this.value)) {\n        document.getElementById(\"label-error\").innerHTML =\n          \"This variable name already exists!\";\n        document.getElementById(\"submit\").disabled = true;\n      } else {\n        document.getElementById(\"label-error\").innerHTML = \"\";\n        document.getElementById(\"submit\").disabled = false;\n      }\n    };\n  },\n};\n</script>\n\n<style scoped>\n#label-error {\n  color: red;\n\n}\n#error {\n  color: red;\n    \n  padding: 15px;\n  background-color: lightgray;\n  width: 20vw;\n  margin: auto;\n  display: none;\n}\n#success {\n  color: green;\n  padding: 15px;\n  background-color: lightgray;\n  width: 20vw;\n  margin: auto;\n  display: none;\n}\n.tooltipped:hover {\n  cursor: help;\n}\n</style>"],"sourceRoot":"src/components"}]}