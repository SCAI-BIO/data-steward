{"remainingRequest":"/Users/philippwegner/Desktop/Fraunhofer/SEM-Group/git/data-steward-tool/node_modules/thread-loader/dist/cjs.js!/Users/philippwegner/Desktop/Fraunhofer/SEM-Group/git/data-steward-tool/node_modules/babel-loader/lib/index.js!/Users/philippwegner/Desktop/Fraunhofer/SEM-Group/git/data-steward-tool/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/philippwegner/Desktop/Fraunhofer/SEM-Group/git/data-steward-tool/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/philippwegner/Desktop/Fraunhofer/SEM-Group/git/data-steward-tool/src/components/DataMapper.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/philippwegner/Desktop/Fraunhofer/SEM-Group/git/data-steward-tool/src/components/DataMapper.vue","mtime":1634051578632},{"path":"/Users/philippwegner/Desktop/Fraunhofer/SEM-Group/git/data-steward-tool/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/philippwegner/Desktop/Fraunhofer/SEM-Group/git/data-steward-tool/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/philippwegner/Desktop/Fraunhofer/SEM-Group/git/data-steward-tool/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/philippwegner/Desktop/Fraunhofer/SEM-Group/git/data-steward-tool/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/philippwegner/Desktop/Fraunhofer/SEM-Group/git/data-steward-tool/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["DataMapper.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"container pt-10\" id=\"main_container\">\n    <div id=\"global-loader\" class=\"global-loader\">\n      <div class=\"loader-elem\">\n        <atomspinner :size=\"80\" color=\"#5AA8EA\" />\n        <p id=\"loader-text\">updating...</p>\n      </div>\n    </div>\n    <div id=\"errorMessageTop\" style=\"display: none\">\n      <div class=\"materialert error\">\n        <i class=\"material-icons\">report_problem</i>\n        <span id=\"errorText\"></span>\n        <button type=\"button\" class=\"close-alert\" @click=\"closeError()\">\n          ×\n        </button>\n      </div>\n    </div>\n    <h2 class=\"mb-30\">\n      Mapping Assistant\n      <a class=\"tooltipped\" data-position=\"bottom\" :data-tooltip=\"helpText\"\n        ><i class=\"material-icons\">help_outline</i></a\n      >\n    </h2>\n\n    <div class=\"row\">\n      <div class=\"col\" v-if=\"checkForSingleSource()\">\n        <button\n          class=\"btn waves-effect waves-light blue-grey lighten-1\"\n          @click=\"fillSources()\"\n        >\n          Fill sources\n        </button>\n      </div>\n      <div class=\"col\">\n        <p>\n          <label>\n            <input\n              type=\"checkbox\"\n              class=\"filled-in\"\n              id=\"suggestion_checkbox\"\n              @change=\"alterSuggestions()\"\n            />\n            <span>Make suggestions</span>\n          </label>\n        </p>\n      </div>\n      <div class=\"col\">\n        <p>\n          <label>\n            <input type=\"checkbox\" class=\"filled-in\" @change=\"alterOLS()\" />\n            <span>Include OLS</span>\n          </label>\n        </p>\n      </div>\n      <div v-if=\"makeSuggestion == true\" class=\"col\">\n        <span class=\"badge blue\" style=\"color: white\">matched &#62; 80%</span>\n        <span class=\"badge orange\" style=\"color: white\">matched &#60; 80%</span>\n      </div>\n\n      <!-- \n\n            Modal for editing the row\n        -->\n\n      <div id=\"modal1\" class=\"modal\">\n        <div class=\"modal-content\">\n          <h4>Edit mapping for {{ modal.extVar }}</h4>\n\n          <div class=\"row\">\n            <div class=\"input-field col s6\">\n              <label for=\"sourceModal\">Source</label>\n              <input\n                class=\"autocomplete_source\"\n                type=\"text\"\n                id=\"sourceModal\"\n                :value=\"modal.source\"\n                @change=\"alterSource()\"\n              />\n            </div>\n            <div class=\"input-field col s6\">\n              <label for=\"sourceModal\">External Variable</label>\n              <input\n                type=\"text\"\n                id=\"extVarModal\"\n                :value=\"modal.extVar\"\n                readonly\n              />\n            </div>\n          </div>\n          <div v-if=\"includeOLS == true\" class=\"row\">\n            <div class=\"input-field col s6\">\n              <label for=\"sourceModal\">Internal Variable</label>\n              <input\n                class=\"autocomplete\"\n                type=\"text\"\n                id=\"intVarModal\"\n                :value=\"modal.intVar\"\n                @change=\"alterIntVar()\"\n              />\n            </div>\n            <div class=\"input-field col s6\">\n              <label for=\"sourceModal\">OLS Variable</label>\n\n              <input\n                @input=\"addOLStoAutocomplete()\"\n                class=\"ols_autocomplete\"\n                type=\"text\"\n                id=\"olsVarModal\"\n                :value=\"modal.olsVar\"\n                @change=\"alterOLSVar()\"\n              />\n            </div>\n          </div>\n          <div v-else class=\"row\">\n            <div class=\"input-field col s10\">\n              <label for=\"sourceModal\">Internal Variable</label>\n              <input\n                class=\"autocomplete\"\n                type=\"text\"\n                id=\"intVarModal\"\n                :value=\"modal.intVar\"\n                @change=\"alterIntVar()\"\n              />\n            </div>\n          </div>\n        </div>\n        <div class=\"modal-footer\">\n          <a class=\"modal-close waves-effect waves-green btn-flat\" href=\"#!\">\n            Ok\n          </a>\n        </div>\n      </div>\n    </div>\n\n    <datatable\n      title=\"Add mappings (Click on rows to edit)\"\n      :columns=\"columns\"\n      :rows=\"rows\"\n      v-on:row-click=\"onRowClick\"\n    >\n      <th slot=\"thead-tr\">Actions</th>\n      <template slot=\"tbody-tr\" scope=\"props\">\n        <td>\n          <button\n            class=\"btn waves-effect waves-light blue-grey lighten-1\"\n            @click=\"(e) => submitMapping(props.row, e)\"\n          >\n            Edit mappings<i class=\"material-icons white-text\">send</i>\n          </button>\n        </td>\n      </template>\n    </datatable>\n  </div>\n</template>\n\n<script>\nimport { AtomSpinner } from \"epic-spinners\";\nimport axios from \"axios\";\nimport DataTable from \"vue-materialize-datatable\";\nimport M from \"materialize-css\";\n\nexport default {\n  components: {\n    datatable: DataTable,\n    atomspinner: AtomSpinner,\n  },\n  data: function () {\n    return {\n      openModalTS: \"\",\n      helpText:\n        \"This assistant provides help for mapping variaables. The list below provides all variables in the dataset uploaded, that yould not be found in the current system or there was no suitable mapping onto a variable currently in the system. The assistant provides a suggestion system and backup support from OLS (Ontology Lookup System). Enable the two checkboxes below to activate these features. Try and prefferedly choose those variables that are already in the system and if nothing fits your data import one from OLS. If there is not suitable variable in OLS then you can go to the Model Wizard and add a variable by hand.\",\n      attrObj: {},\n      olsAutocomplete: {},\n      sourceObj: {},\n      has_suggestion: [],\n      modal: {\n        extVar: \"\",\n        intVar: \"\",\n        source: \"\",\n        olsVar: \"\",\n      },\n      hasSuggestionOls: [],\n\n      makeSuggestion: false,\n      includeOLS: false,\n      columns: [\n        { label: \"Source\", field: \"source\" },\n        { label: \"External Variable\", field: \"extVar\" },\n        { label: \"Internal Variable\", field: \"intVar\", html: true },\n      ],\n      rows: [],\n    };\n  },\n  async created() {\n    const response = await axios.get(\n      process.env.VUE_APP_CLINICALURL + \"/get/all-attr-unmapped\"\n    );\n    for (var i = 0; i < response.data[\"datapoints\"].length; i++) {\n      this.rows.push({\n        source: \"\",\n        extVar: response.data[\"datapoints\"][i],\n        intVar: \"\",\n        olsVar: \"\",\n      });\n    }\n    await this.loadAttrAndSourceFromBackend();\n  },\n\n  mounted: function () {\n    document.addEventListener(\"DOMContentLoaded\", function () {\n      var elems = document.querySelectorAll(\".modal\");\n      M.Modal.init(elems);\n      M.Tooltip.init(document.querySelectorAll(\".tooltipped\"));\n    });\n    if (window.innerWidth <= 1300) {\n      document.getElementById(\"main_container\").classList.remove(\"container\");\n      document.getElementById(\"main_container\").classList.add(\"px-4\");\n    } else {\n      document.getElementById(\"main_container\").classList.add(\"container\");\n      document.getElementById(\"main_container\").classList.remove(\"px-4\");\n    }\n    window.onresize = function () {\n      if (window.innerWidth <= 1300) {\n        document.getElementById(\"main_container\").classList.remove(\"container\");\n        document.getElementById(\"main_container\").classList.add(\"px-4\");\n      } else {\n        document.getElementById(\"main_container\").classList.add(\"container\");\n        document.getElementById(\"main_container\").classList.remove(\"px-4\");\n      }\n    };\n  },\n\n  updated: function () {\n    // autocomplete\n    console.debug(\"Loading autocomplete...\");\n    var elems = document.querySelectorAll(\".autocomplete\");\n\n    M.Autocomplete.init(elems, { data: this.attrObj });\n\n    var elems_source = document.querySelectorAll(\".autocomplete_source\");\n    M.Autocomplete.init(elems_source, { data: this.sourceObj });\n\n    var elems_ols = document.querySelector(\".ols_autocomplete\");\n    M.Autocomplete.init(elems_ols, { data: this.olsAutocomplete });\n  },\n\n  methods: {\n    checkForSingleSource: function () {\n      function onlyUnique(value, index, self) {\n        return self.indexOf(value) === index;\n      }\n      var sources = [];\n      this.rows.forEach((row) => {\n        sources.push(row.source);\n      });\n      sources = sources.filter((src) => src != \"\");\n      var filteredSources = sources.filter(onlyUnique);\n\n      return filteredSources.length == 1;\n    },\n    fillSources: function () {\n      console.debug(\"filling sources...\");\n      document.getElementById(\"global-loader\").style.display = \"block\";\n      if (this.checkForSingleSource()) {\n        var src = this.rows.filter((row) => row.source != \"\")[0].source;\n        this.rows.forEach((row) => (row.source = src));\n        M.toast({ html: `Successfully filled sources with ${src}` });\n        document.getElementById(\"global-loader\").style.display = \"none\";\n      } else {\n        console.debug(\"Sources not unique\");\n        document.getElementById(\"global-loader\").style.display = \"none\";\n        return;\n      }\n    },\n    checkValid: (literal) => {\n      if (literal == null) {\n        return false;\n      }\n      if (literal == \"\") {\n        return false;\n      }\n      return true;\n    },\n    alterIntVar: function () {\n      var row = this.rows.find((elem) => elem.extVar == this.modal.extVar);\n      row.intVar = document.getElementById(\"intVarModal\").value;\n      this.modal.intVar = document.getElementById(\"intVarModal\").value;\n      return;\n    },\n    alterOLSVar: function () {\n      var row = this.rows.find((elem) => elem.extVar == this.modal.extVar);\n      row.olsVar = document.getElementById(\"olsVarModal\").value;\n      this.modal.olsVar = document.getElementById(\"olsVarModal\").value;\n      return;\n    },\n    alterSource: function () {\n      var row = this.rows.find((elem) => elem.extVar == this.modal.extVar);\n      row.source = document.getElementById(\"sourceModal\").value;\n      this.modal.source = document.getElementById(\"sourceModal\").value;\n      return;\n    },\n    alterTrans: function () {\n      var row = this.rows.find((elem) => elem.extVar == this.modal.extVar);\n      row.trans = document.getElementById(\"transModal\").value;\n      return;\n    },\n    extractContent: function(s) {\n  var span = document.createElement('span');\n  span.innerHTML = s;\n  return span.textContent || span.innerText;\n},\n\n    submitMapping: async function (props, e) {\n      this.openModalTS = new Date().getTime();\n\n    \n\n      e.preventDefault(); // does not prevent modal from opening...\n      var extVar = props.extVar;\n      var intVar = this.extractContent(props.intVar);\n      console.log(intVar);\n      var src = props.source;\n      var olsVar = props.olsVar;\n\n      //console.log(extVar,intVar, src);\n      /*var trans = props.trans;*/\n      if (\n        (this.checkValid(extVar) &&\n          this.checkValid(intVar) &&\n          this.checkValid(src) &&\n          !this.checkValid(olsVar)) ||\n        (this.checkValid(extVar) &&\n          !this.checkValid(intVar) &&\n          this.checkValid(src) &&\n          this.checkValid(olsVar))\n        /* this.checkValid(trans) this is maybe optional */\n      ) {\n        // mapping\n        if (this.checkValid(olsVar)) {\n          intVar = olsVar;\n        }\n        const mappingResponse = await axios({\n          method: \"post\",\n          url: process.env.VUE_APP_CLINICALURL + \"/post/basic-mapping\",\n          data: {\n            source: src,\n            source_attribute: extVar,\n            target: intVar,\n          },\n          withCredentials: true,\n        });\n        //console.log(mappingResponse);\n        if (mappingResponse.data[\"message\"] == \"ok\") {\n          this.rows = this.rows.filter((elem) => elem.extVar != extVar); // remove the row from the table\n          M.toast({ html: \"You successfully mapped: \" + extVar });\n          if (intVar.split(\"|\").length > 2) {\n            M.toast({\n              html:\n                \"You successfully added term from OLS: \" + extVar.split(\"|\")[0],\n            });\n          }\n        } else {\n          document.getElementById(\"errorMessageTop\").style.display = \"block\";\n          document.getElementById(\"errorText\").innerText =\n            mappingResponse.data[\"message\"];\n        }\n      } else {\n        M.toast({ html: \"Please check your input\" });\n        return;\n      }\n    },\n\n    closeError: function () {\n      document.getElementById(\"errorMessageTop\").style.display = \"none\";\n    },\n    onRowClick: async function (row) {\n      var ts = new Date().getTime();\n      if (ts - this.openModalTS < 1000) {\n        // prevent row click when submit is intended @future_philipp : feel free to implement better !\n        return;\n      }\n      function extractContent(s) {\n        var span = document.createElement(\"span\");\n        span.innerHTML = s;\n        return span.textContent || span.innerText;\n      }\n\n      // setting data to render it into the model body\n      this.modal.extVar = row.extVar;\n      this.modal.intVar = extractContent(row.intVar);\n      this.modal.source = row.source;\n      this.modal.olsVar = row.olsVar;\n\n      this.olsAutocomplete = {};\n      // open modal\n      var elem = document.querySelectorAll(\".modal\")[0];\n      var instance = M.Modal.getInstance(elem);\n      await instance.open();\n      M.updateTextFields();\n    },\n\n    addSuggestions: async function () {\n      for (var i = 0; i < this.rows.length; i++) {\n        if (this.rows[i].intVar === \"\") {\n          const response = await axios.get(\n            process.env.VUE_APP_CLINICALURL +\n              \"/get/nearest-neighbor?attribute=\" +\n              this.rows[i].extVar +\n              \"&ols=\" +\n              this.includeOLS\n          );\n          if (response.data[\"candidate\"] != \"--no-candidate--\") {\n            if (response.data[\"candidate\"].split(\"|\").length > 2) {\n              // OLS VAR\n              this.rows[i].olsVar = response.data[\"candidate\"];\n\n              this.hasSuggestionOls.push(this.rows[i].olsVar);\n            } else {\n              // Var from backend\n\n              if (response.data[\"distance\"] >= 0.8) {\n                this.rows[i].intVar =\n                  \"<span class='badge blue' style='color: white'>\" +\n                  response.data[\"candidate\"] +\n                  \"</span>\";\n                //this.rows[i].suggestionDistance =  \"<span class='badge blue'> </span>\";\n              } else {\n                this.rows[i].intVar =\n                  \"<span class='badge orange' style='color: white'>\" +\n                  response.data[\"candidate\"] +\n                  \"</span>\";\n                //this.rows[i].suggestionDistance = \"<span class='badge orange'> </span>\";\n              }\n              this.has_suggestion.push(this.rows[i].extVar);\n            }\n          }\n        }\n      }\n    },\n    removeSuggestions: function () {\n      this.rows\n        .filter((row) => this.has_suggestion.includes(row.extVar))\n        .forEach((row) => {\n          row.intVar = \"\";\n        });\n      this.has_suggestion = [];\n      this.rows\n        .filter((row) => this.hasSuggestionOls.includes(row.olsVar))\n        .forEach((row) => {\n          row.olsVar = \"\";\n        });\n      this.hasSuggestionOls = [];\n    },\n    alterSuggestions: async function () {\n      document.getElementById(\"global-loader\").style.display = \"block\";\n      if (this.makeSuggestion) {\n        this.makeSuggestion = false;\n        // this.columns.splice(\n        //   this.columns.indexOf({\n        //     label: \"Suggestion\",\n        //     field: \"suggestionDistance\",\n        //   }),\n        //   1\n        // );\n        this.removeSuggestions();\n        M.toast({ html: \"Suggestions disabled\" });\n      } else {\n        this.makeSuggestion = true;\n        //this.columns.push({ label: \"Suggestion\", field: \"suggestionDistance\" , html: true});\n        M.toast({ html: \"Searching for suggestions...\" });\n        await this.addSuggestions();\n        M.toast({ html: \"Suggestions added to table!\" });\n      }\n      document.getElementById(\"global-loader\").style.display = \"none\";\n    },\n    alterOLS: async function () {\n      document.getElementById(\"global-loader\").style.display = \"block\";\n      if (this.includeOLS) {\n        //await this.removeOLSfromAutocomplete();\n        this.columns.splice(\n          this.columns.indexOf({ label: \"OLS Variable\", field: \"olsVar\" }),\n          1\n        );\n\n        this.rows\n          .filter((row) => this.hasSuggestionOls.includes(row.olsVar))\n          .forEach((row) => {\n            row.olsVar = \"\";\n          });\n        this.hasSuggestionOls = [];\n        this.includeOLS = false;\n        M.toast({ html: \"OLS search disabled\" });\n      } else {\n        //await this.addOLStoAutocomplete();\n        this.columns.push({ label: \"OLS Variable\", field: \"olsVar\" });\n        this.includeOLS = true;\n        if (this.makeSuggestion) {\n          await this.addSuggestions();\n        }\n        M.toast({ html: \"OLS search enabled\" });\n      }\n      document.getElementById(\"global-loader\").style.display = \"none\";\n    },\n    addOLStoAutocomplete: async function () {\n      /**\n       * \n       Use this in case CORS fails\n     var headers = {\n      'Access-Control-Allow-Origin': '*',\n      'Content-Type': 'application/json',\n    }\n    */\n      var inputElem = document.getElementById(\"olsVarModal\");\n      var term = inputElem.value;\n\n      var addToAutocomplete = {};\n\n      const olsResponse = await axios.get(\n        process.env.VUE_APP_OLSURL + `api/select?q=${term}&rows=10`\n      );\n      var responseObj = olsResponse.data.response.docs;\n      for (var k = 0; k < responseObj.length; k++) {\n        if (\n          this.rows.filter((row) => {\n            row.intVar === responseObj[k][\"label\"];\n          }).length == 0\n        ) {\n          // make sure that this is not already in the backend\n          addToAutocomplete[\n            responseObj[k][\"label\"] +\n              \"|\" +\n              responseObj[k][\"ontology_name\"] +\n              \"|\" +\n              responseObj[k][\"iri\"]\n          ] = null;\n        }\n      }\n      // add the results to autocomplete\n      this.olsAutocomplete = addToAutocomplete;\n      var instance = M.Autocomplete.getInstance(\n        document.getElementById(\"olsVarModal\")\n      );\n      instance.updateData(addToAutocomplete);\n    },\n\n    loadAttrAndSourceFromBackend: async function () {\n      const attributes = await axios.get(\n        process.env.VUE_APP_CLINICALURL + \"/get/attributes/all\"\n      );\n      const sources_all = await axios.get(\n        process.env.VUE_APP_CLINICALURL + \"/get/sources/all\"\n      );\n\n      var sourceObj = {};\n      sources_all[\"data\"][\"sources\"].forEach((elem) => {\n        sourceObj[elem] = null;\n      });\n\n      var attrObj = {};\n      attributes[\"data\"][\"attributes\"].forEach((attr) => {\n        attrObj[attr.name] = null;\n      });\n      this.attrObj = attrObj;\n      this.sourceObj = sourceObj;\n    },\n    removeOLSfromAutocomplete: async function () {\n      await this.loadAttrAndSourceFromBackend();\n    },\n  },\n};\n</script>\n\n<style>\n\n.waves-light{\n  z-index: 0 !important;\n\n}\n.global-loader {\n  position: absolute;\n  display: none;\n  top: 0;\n  left: 0;\n  z-index: 9999;\n  width: 100vw;\n  height: 100vh;\n  background-color: rgba(220, 220, 220, 0.5);\n}\n.loader-elem {\n  position: absolute;\n  top: 45%;\n  left: 50%;\n  transform: translateX(-50%);\n}\n.materialert {\n  position: relative;\n  min-width: 150px;\n  padding: 15px;\n  margin-bottom: 20px;\n  margin-top: 15px;\n  border: 1px solid transparent;\n  border-radius: 4px;\n  transition: all 0.1s linear;\n  webkit-box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.14),\n    0 3px 1px -2px rgba(0, 0, 0, 0.12), 0 1px 5px 0 rgba(0, 0, 0, 0.2);\n  box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.14),\n    0 3px 1px -2px rgba(0, 0, 0, 0.12), 0 1px 5px 0 rgba(0, 0, 0, 0.2);\n  display: -webkit-box;\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-align: center;\n  -webkit-align-items: center;\n  -ms-flex-align: center;\n  align-items: center;\n}\n.materialert .material-icons {\n  margin-right: 10px;\n}\n.materialert .close-alert {\n  -webkit-appearance: none;\n  border: 0;\n  cursor: pointer;\n  color: inherit;\n  background: 0 0;\n  font-size: 22px;\n  line-height: 1;\n  font-weight: bold;\n  text-shadow: 0 1px 0 rgba(255, 255, 255, 0.7);\n  filter: alpha(opacity=40);\n  margin-bottom: -5px;\n  position: absolute;\n  top: 16px;\n  right: 5px;\n}\n.materialert.info {\n  background-color: #039be5;\n  color: #fff;\n}\n.materialert.success {\n  background-color: #43a047;\n  color: #fff;\n}\n.materialert.error {\n  background-color: #c62828;\n  color: #fff;\n}\n.materialert.danger {\n  background-color: #c62828;\n  color: #fff;\n}\n.materialert.warning {\n  background-color: #fbc02d;\n  color: #fff;\n}\n</style>"],"sourceRoot":"src/components"}]}